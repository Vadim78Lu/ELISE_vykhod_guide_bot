import os
import telebot
import openai
import yaml

# –ó–∞–≥—Ä—É–∑–∫–∞ YAML –ø–æ –∫–æ–¥—É —à–∞–≥–∞
def load_step_yaml(step_code):
    with open(f"{step_code}.yaml", "r", encoding="utf-8") as f:
        return yaml.safe_load(f)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ELISE –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ YAML
with open("elise_–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.yaml", "r", encoding="utf-8") as f:
    welcome_data = yaml.safe_load(f)
WELCOME_TEXT = welcome_data["—Ç–µ–∫—Å—Ç"]

# –ü–∞–º—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
client_step = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
TELEGRAM_TOKEN = os.environ.get("Telegram_BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OpenAI_API_KEY")

bot = telebot.TeleBot(TELEGRAM_TOKEN)
openai.api_key = OPENAI_API_KEY

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id
    text = message.text.strip().lower()

    # –°—Ç–∞—Ä—Ç ‚Äî –ø–æ–ª–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
    if text in ["—Å—Ç–∞—Ä—Ç", "/start", "–Ω–∞—á–∞—Ç—å", "–ø—Ä–∏–≤–µ—Ç", "hello"]:
        client_step[user_id] = "01_–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ"
        bot.reply_to(message, WELCOME_TEXT)
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–∑–∞–¥–∞–Ω–∏–µ" ‚Äî –¥–æ—Å—Ç–∞—ë–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ YAML –ø–æ —Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É
    if text == "–∑–∞–¥–∞–Ω–∏–µ":
        step = client_step.get(user_id, "01_–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
        try:
            data = load_step_yaml(step)
            exercise = data.get("–∑–∞–¥–∞–Ω–∏–µ", {}).get("—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω–æ.")
            bot.reply_to(message, f"üìù –¢–≤–æ—ë –∑–∞–¥–∞–Ω–∏–µ:\n{exercise}")
        except FileNotFoundError:
            bot.reply_to(message, "–§–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ö–æ–º–∞–Ω–¥–∞ "–¥–∞–ª—å—à–µ" ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    if text == "–¥–∞–ª—å—à–µ":
        current = client_step.get(user_id, "01_–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
        next_step = "02_–æ—Å–æ–∑–Ω–∞–Ω–∏–µ" if current == "01_–≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ" else "03_–ø—Ä–∞–≤–∏–ª–∞_–æ—à–∏–±–∫–∏"
        client_step[user_id] = next_step

        try:
            data = load_step_yaml(next_step)
            –∫—Ä–∞—Ç–∫–æ = data.get("—Ü–µ–ª—å", "–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥.")
            bot.reply_to(message, f"üß≠ –ù–æ–≤—ã–π —à–∞–≥: {next_step}\n{–∫—Ä–∞—Ç–∫–æ}")
        except FileNotFoundError:
            bot.reply_to(message, "–§–∞–π–ª —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî GPT –æ—Ç–≤–µ—á–∞–µ—Ç
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": message.text}]
    )
    reply = response['choices'][0]['message']['content']
    bot.reply_to(message, reply)

bot.polling()
